<?php
/**
 * (c) 2015 cepharum GmbH, Berlin, http://cepharum.de
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author: cepharum
 */

namespace de\toxa\txf\model;

use \de\toxa\txf\datasource\connection;
use \de\toxa\txf\datasource\datasource_exception;
use \de\toxa\txf\widget;
use \de\toxa\txf\application;
use \de\toxa\txf\context;
use \de\toxa\txf\http_exception;
use \de\toxa\txf\databrowser;
use \de\toxa\txf\markup;
use \de\toxa\txf\user;
use \de\toxa\txf\html;
use \de\toxa\txf\txf;
use \de\toxa\txf\view;
use \de\toxa\txf\data;
use \de\toxa\txf\input;


/**
 * Implements controller class for simplifying use of models in scripts for
 * managing model instances.
 *
 * @package de\toxa\txf
 */

class controller implements widget {

	/**
	 * @var connection
	 */

	protected $source = null;

	/**
	 * @var \ReflectionClass
	 */

	protected $modelClass = null;

	/**
	 * @var model
	 */

	protected $item = null;

	/**
	 * @var boolean
	 */

	protected $isListing = null;

	/**
	 * @var callable
	 */

	protected $viewCustomizer = null;

	/**
	 * @var callable
	 */

	protected $editorValidator = null;

	/**
	 * @var callable
	 */

	protected $browserCustomizer = null;

	/**
	 * @var model_editor
	 */

	protected $editor = null;

	/**
	 * @var databrowser
	 */

	protected $browser = null;

	/**
	 * @var string
	 */

	protected $action = null;

	/**
	 * @var callable[]
	 */

	protected $handlers = array();

	/**
	 * Output generated by requested action handler.
	 *
	 * @var string
	 */

	protected $code = null;

	/**
	 * Code snippets of elements to show on panel related to current view.
	 *
	 * @var string[]
	 */

	protected $panel = array();

	/**
	 * Selects explicit sorting order of controls on panel.
	 *
	 * @var string[]
	 */

	protected $panelSorting = null;

	/**
	 * Describes selected format to use in processing request and creating
	 * response.
	 *
	 * @var string
	 */

	protected $format = null;



	public function __construct( connection $source = null, $model, $itemId = array(), $action = null ) {
		$this->source = $source;

		$this->getModel( $model );
		$this->getSelectedItem( $itemId );
		$this->getAction( $action );
	}

	/**
	 * @param connection $source link to datasource model is stored in
	 * @param string $model qualified name of model to control
	 * @param array $itemId ID of item to use, omit for extracting from request URL
	 * @param string $action action to perform, omit for extracting from request URL
	 * @return controller
	 */

	public static function create( connection $source = null, $model, $itemId = array(), $action = null ) {
		return new static( $source, $model, $itemId, $action );
	}

	/**
	 * Prepares controller for managing selected model (unless prepared before).
	 *
	 * @param string $model qualified class name of model to use
	 * @return \ReflectionClass
	 */

	public function getModel( $model = null ) {
		if ( !( $this->modelClass instanceof \ReflectionClass ) ) {
			// validate provided (name of) model to control
			if ( is_string( $model ) ) {
				$this->modelClass = new \ReflectionClass( trim( $model ) );
			} else if ( $model instanceof model ) {
				$this->modelClass = $model->getReflection();
			} else {
				throw new \InvalidArgumentException( "invalid or missing model to control" );
			}
		}

		return $this->modelClass;
	}

	/**
	 * Prepares controller for managing selected item (unless prepared before).
	 *
	 * @throws \Exception if model hasn't been prepared before
	 * @param array $itemId optional ID of item to select, omit for inspecting selectors of request URL
	 * @return model
	 */

	public function getSelectedItem( $itemId = array() ) {
		if ( is_null( $this->item ) ) {
			// validate provided item selection (using selectors of request URL as fallback)
			if ( !is_array( $itemId ) && $itemId ) {
				$itemId = array( $itemId );
			}

			$class     = $this->getModel();
			$selectors = application::current()->selectors;
			$idNames   = $class->getMethod( 'idName' )->invoke( null, null );

			if ( !$itemId || !count( $itemId ) ) {
				if ( count( $selectors ) >= count( $idNames ) ) {
					$itemId = array_slice( $selectors, 0, count( $idNames ) );
				} else {
					$itemId = null;
				}
			}

			if ( $itemId ) {
				$this->isListing = false;

				if ( !count( array_filter( $itemId, function( $i ) { return !!$i; } ) ) ) {
					$itemId = null;
				}
			} else {
				$this->isListing = true;
			}

			if ( $itemId ) {
				// qualify ID
				$itemId     = array_combine( $idNames, $itemId );

				$this->item = $class->getMethod( 'select' )->invoke( null, $this->source, $itemId );
			} else {
				$this->item = false;
			}
		}


		return $this->item;
	}

	/**
	 * Prepares action to perform (unless prepared before).
	 *
	 * @param string $explicit some explicit action to use instead of automatically extracted one
	 * @return string
	 */

	public function getAction( $explicit = null ) {
		if ( is_null( $this->action ) ) {
			if ( is_string( $explicit ) && trim( $explicit ) !== '' ) {
				$this->action = $explicit;
			} else {
				$idSize    = $this->getModel()->getMethod( 'idSize' )->invoke( null );
				$selectors = application::current()->selectors;

				if ( count( $selectors ) > $idSize ) {
					$this->action = $selectors[$idSize];
				} else if ( count( $selectors ) === 1 ) {
					// tricky case: single selector might be ID of item or
					// action on list of items or action for creating new item
					// -> provide 0-ID to handle this case
					// TODO Revise approaching this tricky case.
					$this->action = 'index';
				} else {
					$this->action = 'index';
				}
			}

			$this->action = strtolower( trim( $this->action ) );

			if ( preg_match( '/^(.+)\.([a-z]+)$/', $this->action, $matches ) ) {
				$this->format = strtolower( $matches[2] );
				$this->action = trim( $matches[1] );
			}
		}

		return $this->action;
	}

	/**
	 * Retrieves format to use on processing request and creating response.
	 *
	 * @return string
	 */

	public function getFormat() {
		if ( $this->format === null ) {
			$this->getAction();

			$this->format = input::vget( 'format', \de\toxa\txf\_1( $this->format, 'html' ) );
		}

		return $this->format;
	}

	/**
	 * Detects if request for processing HTML input for creating HTML response.
	 *
	 * This is the normal/default case.
	 *
	 * @return bool
	 */

	public function isHtmlRequest() {
		return $this->getFormat() === 'html';
	}

	/**
	 * Detects if request for processing JSON input for creating JSON response.
	 *
	 * @return bool
	 */

	public function isJsonRequest() {
		return $this->getFormat() === 'json';
	}

	/**
	 * Detects if request for processing XML input for creating XML response.
	 *
	 * @return bool
	 */

	public function isXmlRequest() {
		return $this->getFormat() === 'xml';
	}

	public function setActionHandler( $action, $handler = null ) {
		if ( !is_null( $handler ) && !is_callable( $handler ) ) {
			throw new \InvalidArgumentException( 'invalid action handler' );
		}

		if ( !is_string( $action ) || trim( $action ) === '' ) {
			throw new \InvalidArgumentException( 'invalid or missing action name' );
		}

		$action = strtolower( trim( $action ) );


		if ( is_null( $handler ) ) {
			unset( $this->handlers[$action] );
		} else {
			$this->handlers[$action] = $handler;
		}

		return $this;
	}

	public function setBrowserCustomizer( $callback = null ) {
		if ( !is_null( $callback ) && !is_callable( $callback ) ) {
			throw new \InvalidArgumentException( 'invalid callback' );
		}

		$this->browserCustomizer = $callback;

		return $this;
	}

	public function setViewCustomizer( $callback = null ) {
		if ( !is_null( $callback ) && !is_callable( $callback ) ) {
			throw new \InvalidArgumentException( 'invalid callback' );
		}

		$this->viewCustomizer = $callback;

		return $this;
	}

	public function setEditorValidator( $callback = null ) {
		if ( !is_null( $callback ) && !is_callable( $callback ) ) {
			throw new \InvalidArgumentException( 'invalid callback' );
		}

		$this->editorValidator = $callback;

		return $this;
	}

	public function setPanelControl( $name, $htmlCode = null ) {
		if ( is_null( $htmlCode ) ) {
			unset( $this->panel[$name] );
		} else {
			$this->panel[$name] = strval( $htmlCode );
		}

		return $this;
	}

	public function hasPanelControl( $name ) {
		return array_key_exists( $name, $this->panel );
	}

	public function setPanelSorting( $sorting ) {
		if ( !is_array( $sorting ) ) {
			$sorting = func_get_args();
		}

		$sorting = array_filter( $sorting, function( $i ) { is_string( $i ); } );

		if ( count( $sorting ) ) {
			$this->panelSorting = $sorting;
		} else {
			$this->panelSorting = null;
		}

		return $this;
	}

	public function getEditor() {
		if ( $this->isListing() ) {
			throw new \RuntimeException( 'invalid use of viewer/editor in multi-item mode' );
		}

		return $this->prepareControl()->editor;
	}

	public function getBrowser() {
		if ( !$this->isListing() ) {
			throw new \RuntimeException( 'invalid use of browser in single-item mode' );
		}

		return $this->prepareControl()->browser;
	}

	protected function prepareControl() {
		if ( is_null( $this->browser ) && is_null( $this->editor ) ) {

			if ( $this->isListing() ) {
				$this->browser = databrowser::create( $this->modelClass->getMethod( 'browse' )->invoke( null, $this->source ) );
			} else {
				if ( $this->item ) {
					$this->editor = model_editor::createOnItem( $this->source, $this->item );
				} else {
					$this->editor = model_editor::createOnModel( $this->source, $this->modelClass );
				}
			}
		}

		return $this;
	}

	public function getUrls() {
		return (object) array(
			'edit'   => context::selfURL( false, '%s', 'edit' ),
			'add'    => context::selfURL( false, '0', 'edit' ),
			'delete' => context::selfURL( false, '%s', 'delete' ),
			'view'   => context::selfURL( false, '%s' ),
			'list'   => context::selfURL( false, false ),
		);
	}

	public function perform() {
		$action = $this->getAction();

		if ( array_key_exists( $action, $this->handlers ) ) {
			$method = $this->handlers[$action];
		} else {
			$methodName = 'perform' . ucfirst( $action );
			$method     = array( $this, $methodName );
		}

		if ( is_callable( $method ) ) {
			return call_user_func( $method, $this );
		}

		throw new http_exception( 400, 'no such action' );
	}

	public function performIndex() {
		$this->prepareControl();

		if ( $this->isListing ) {
			/*
			 * Provide default action on set of selected model's items.
			 */

			$this->browser->setPagerVolatility( "none" );

			if ( is_callable( $this->browserCustomizer ) ) {
				call_user_func( $this->browserCustomizer, $this, $this->browser );
			} else {
				// try generate some commonly useful databrowser
				$controller = $this;

				$this->browser
					->addColumn( 'label', \de\toxa\txf\_L('Label'), false, function( $value, $propName, $record, $id ) use ( $controller ) {
						return $controller->getModel()->getMethod( 'select' )->invoke( null, $controller->source, $id )->describe();
					} )
					->setRowCommander( function( $id, $data ) use ( $controller ) {
						$items = array(
							'view'   => markup::link( sprintf( $controller->getUrls()->view, $id ), \de\toxa\txf\_L('view item'), 'controller-list-action-view' ),
							'edit'   => markup::link( sprintf( $controller->getUrls()->edit, $id ), \de\toxa\txf\_L('edit item'), 'controller-list-action-edit' ),
							'delete' => markup::link( sprintf( $controller->getUrls()->delete, $id ), \de\toxa\txf\_L('delete item'), 'controller-list-action-delete' ),
						);

						if ( !user::current()->isAuthenticated() )
							unset( $items['edit'], $items['delete'] );

						return implode( ' ', array_filter( $items ) );
					} );

				if ( user::current()->isAuthenticated() ) {
					$controller->setPanelControl( 'add', markup::link( $controller->getUrls()->add, \de\toxa\txf\_L('add item'), 'controller-list-action-add' ) );
				}
			}

			if ( user::current()->isAuthenticated() ) {
				if ( !$this->hasPanelControl( 'add' ) ) {
					$this->setPanelControl( 'add', markup::link( context::selfURL( false, array_merge( array_pad( array(), $this->modelClass->getMethod( 'idSize' )->invoke( null ), 0 ), array( 'edit' ) ) ), \de\toxa\txf\_L('Add') ) );
				}
			}

			$this->browser->processInput();

			return $this->browser->getCode();
		}


		/**
		 * Provide default action on single instance of selected model.
		 */

		$this->editor->mayEdit( false )->mayDelete( false );

		if ( is_callable( $this->viewCustomizer ) ) {
			call_user_func( $this->viewCustomizer, $this, false /* "no request for editing item" */ );
		} else {
			$data = $this->editor->item()->published();

			// reduce relations
			foreach ( $data as $key => $value ) {
				if ( is_array( $value ) ) {
					$data[$key] = implode( ', ', $value );
				}
			}

			return html::arrayToCard( $data );
		}

		if ( user::current()->isAuthenticated() ) {
			if ( !$this->hasPanelControl( 'edit' ) ) {
				$this->setPanelControl( 'edit', markup::link( context::selfURL( false, array_merge( $this->item->id(), array( 'edit' ) ) ), \de\toxa\txf\_L('Edit') ) );
			}
		}

		if ( $this->editor->processInput( $this->editorValidator ) ) {
			txf::redirectTo( $this->getUrls()->list );
		}

		return $this->editor->render();
	}

	public function performEdit() {
		if ( !user::current()->isAuthenticated() ) {
			throw new http_exception( 403 );
		}

		$this->prepareControl();

		if ( is_callable( $this->viewCustomizer ) ) {
			call_user_func( $this->viewCustomizer, $this, true /* "request for editing item" */ );
		} else {
			$authenticated = user::current()->isAuthenticated();

			$this->editor->mayEdit( $authenticated )->mayDelete( $authenticated );
		}

		if ( $this->editor->isEditable() ) {
			$this->editor->form()->post();
		}

		if ( $this->editor->processInput( $this->editorValidator ) ) {
			txf::redirectTo( $this->getUrls()->list );
		}

		return $this->editor->render();
	}

	public function performDelete() {
		if ( !user::current()->isAuthenticated() ) {
			throw new http_exception( 403 );
		}

		$this->prepareControl();

		try {
			$this->getSelectedItem()->delete();
		} catch ( datasource_exception $e ) {
			view::flash( \de\toxa\txf\_L('Failed deleting selected item.'), 'error' );
		} catch ( \RuntimeException $e ) {
			view::flash( \de\toxa\txf\_L('Selected item does not exist (anymore).'), 'error' );
		}

		txf::redirectTo( $this->getUrls()->list );
	}

	public function isListing() {
		return !!$this->isListing;
	}

	public function getTitle() {
		return $this->getModel()->getMethod( 'label' )->invoke( null, $this->getSelectedItem() ? 1 : 20 );
	}

	public function getCode() {
		$code = markup::block( $this->processInput()->code, 'view' );

		if ( count( $this->panel ) ) {
			if ( is_array( $this->panelSorting ) ) {
				data::rearrangeArray( $this->panel, $this->panelSorting, true );
			}

			$code .= markup::block( implode( "\n", $this->panel ), 'panel' );
		}

		return $code;
	}

	public function processInput() {
		if ( is_null( $this->code ) ) {
			$this->code = strval( $this->perform() );
		}

		return $this;
	}
}
